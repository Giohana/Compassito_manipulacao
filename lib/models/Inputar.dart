/*
 * classe que cria os inputs necessarios para cadastrar um novo produto
*/

import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:manipulacao/models/api.dart';
import 'package:manipulacao/models/apiTipoItens.dart';
//import 'package:manipulacao/http/webclient.dart';
import 'package:manipulacao/models/autoGenerate.dart';

class Inputar extends StatefulWidget {
  @override
  _InputarState createState() => _InputarState();
}

class _InputarState extends State<Inputar> {
  //criação do controler para ler o valor digitado
  TextEditingController _controladorItem = TextEditingController();

  TextEditingController _controladorTipoItem = TextEditingController();

  TextEditingController _controladorQuantidadeReservado =
      TextEditingController();

  TextEditingController _controladorQuantidadeDisponivel =
      TextEditingController();

  TextEditingController _controladorValor = TextEditingController();

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      debugShowCheckedModeBanner: false,
      home: Scaffold(
        appBar: AppBar(
          title: Text('Manipulação'),
          leading: new IconButton(
            icon: new Icon(Icons.arrow_back, color: Colors.white),
            onPressed: () => Navigator.of(context).pop(),
          ),
        ),
        body: Column(
          children: <Widget>[
            Input(
              rotulo: 'Nome do produto',
              ctrl: _controladorItem,
            ),
            CardTipodoItem(),
            Input(
              rotulo: 'Quantidade Reservada',
              ctrl: _controladorQuantidadeReservado,
            ),
            Input(
              rotulo: 'Quantidade Disponível',
              ctrl: _controladorQuantidadeDisponivel,
            ),
            Input(
              rotulo: 'Preço',
              ctrl: _controladorValor,
            ),
            Box(),
            RaisedButton(
                child: Text('Confirmar'),
                onPressed: () {
                  debugPrint('pressionei o botão confirmar');

                  final String item = _controladorItem.text;
                  final String tipoItem = _controladorTipoItem.text;
                  final int quantidadeReservado =
                      int.tryParse(_controladorQuantidadeReservado.text);
                  final int quantidadeDisponivel =
                      int.tryParse(_controladorQuantidadeDisponivel.text);
                  final int valor = int.tryParse(_controladorValor.text);
                  //final bool ativo = ativacao;

                  AutoGenerated(
                    item: item,
                    tipoItem: tipoItem,
                    quantidadeReservado: quantidadeReservado,
                    quantidadeDisponivel: quantidadeDisponivel,
                    valor: valor,
                    ativo: true,
                  );

                  print(item);
                  print(tipoItem);
                  print(quantidadeReservado);
                  print(quantidadeDisponivel);
                  print(valor);
                }),
          ],
        ),
      ),
    );
  }
}

//cria o card aonde escolhera o tipo do item
class CardTipodoItem extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Card(
      child: InkWell(
        splashColor: Colors.blue.withAlpha(30),
        onTap: () {
          print('Cliquei no tipo do produto');
          Navigator.push(
              context,
              new MaterialPageRoute(
                  builder: (BuildContext context) => new TipoDoItem()));
        },
        child: Container(
          width: 350,
          height: 50,
          child: Text(
            'Selecione o tipo do produto:',
            style: TextStyle(
              fontSize: 20,
              color: Colors.black.withOpacity(0.6),
              height: 2,
            ),
          ),
        ),
      ),
    );
  }
}

//classe criada com o objetivo inial de criar um dropdownbutton
class TipoDoItem extends StatefulWidget {
  @override
  _TipoDoItemState createState() => _TipoDoItemState();
}

class _TipoDoItemState extends State<TipoDoItem> {
  var tipoProdutos = new List<TipoItem>();

  _getTipoProdutos() {
    ApiTipoItens.getTipos().then((response) {
      setState(() {
        Iterable lista = json.decode(response.body);
        tipoProdutos = lista.map((model) => TipoItem.fromJson(model)).toList();
      });
    });
  }

  _TipoDoItemState() {
    _getTipoProdutos();
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      debugShowCheckedModeBanner: false,
      home: Scaffold(
        appBar: AppBar(
          title: Text(
            'Escolha o tipo de item desejado:',
            style: TextStyle(
              fontSize: 15,
            ),
          ),
          leading: new IconButton(
            icon: new Icon(Icons.arrow_back, color: Colors.white),
            onPressed: () => Navigator.of(context).pop(),
          ),
        ),
        body: tiposdositens(),
      ),
    );
  }

  tiposdositens() {
    return ListView.builder(
      itemCount: tipoProdutos.length,
      itemBuilder: (context, index) {
        return ListTile(
          leading: Icon(Icons.terrain),
          title: Text(tipoProdutos[index].descricao),
          onTap: () {
            var status = tipoProdutos[index].id;
            print(status);
            return status;
          },
        );
      },
    );
  }
}

//cria um box para ativar ou desativar um produto
class Box extends StatefulWidget {
  @override
  _BoxState createState() => _BoxState();
}

class _BoxState extends State<Box> {
  bool ativacao = false;
  @override
  Widget build(BuildContext context) {
    return CheckboxListTile(
      title: Text('Ativar: '),
      value: ativacao,
      onChanged: (bool newValue) {
        setState(() {
          ativacao = newValue;
        });
        if (ativacao) {
          print('ativei');
        } else {
          print("desativei");
        }

        return ativacao;
      },
    );
  }
}

//inputs basicos
class Input extends StatelessWidget {
  final TextEditingController ctrl;
  final String rotulo;

  Input({this.rotulo, this.ctrl});

  @override
  Widget build(BuildContext context) {
    return Padding(
        padding: const EdgeInsets.all(10.0),
        child: TextField(
          controller: ctrl,
          style: TextStyle(fontSize: 20.0),
          decoration: InputDecoration(
            labelText: rotulo,
          ),
        ));
  }
}

/*

 * tratamento de erros que iria fazer, porem não deu tempo ainda 

FutureBuilder<List<AutoGenerated>>(
          future: findAll(),
          builder: (context, snapshot) {
            switch (snapshot.connectionState) {
              case ConnectionState.none:
                break;
              case ConnectionState.waiting:
                break;
              case ConnectionState.active:
                break;
              case ConnectionState.done:
                break;
            }
            final List<AutoGenerated> autoGenerated = snapshot.data;
*/
